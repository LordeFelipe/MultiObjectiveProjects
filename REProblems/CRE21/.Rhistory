a = read.table("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/DiscreteValues.txt",col.names = paste0("V",seq_len(16)), sep = ",",fill = TRUE)
a
a = read.table("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/DiscreteValues.txt",col.names = paste0("V",seq_len(17)), sep = ",",fill = TRUE)
a
a = read.table("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/DiscreteValues.txt",col.names = paste0("V",seq_len(18)), sep = ",",fill = TRUE)
a
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
discrete = read.table("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/DiscreteValues.txt",col.names = paste0("V",seq_len(18)), sep = ",",fill = TRUE)
library(MOEADr)
#Reading the possible discrete values
discrete = read.table("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/DiscreteValues.txt",col.names = paste0("V",seq_len(18)), sep = ",",fill = TRUE)
#Objecive Function for the total weight
EvaluateWeight <- function(X){
write(round(X, digits = 1),file = "~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/pop_vars_eval.txt", ncolumns = 148, sep = "\t")
system("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/mazda_mop_sca ~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/")
objectives <- scan('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/pop_objs_eval.txt')
objectives <- matrix(objectives, ncol = 4, byrow = TRUE)
weight = matrix(objectives[,1], ncol = 1)
weight
}
#Objective Function for the number of commom parts
EvaluateCommonParts <- function(X){
write(round(X, digits = 1),file = "~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/pop_vars_eval.txt", ncolumns = 148, sep = "\t")
system("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/mazda_mop_sca ~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/")
objectives <- scan('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/pop_objs_eval.txt')
objectives <- matrix(objectives, ncol = 4, byrow = TRUE)
common = matrix(objectives[,2], ncol = 1)
common
}
#Definition of the problem
problem.car <- function(X) {
t(apply(X, MARGIN = 1,
FUN = function(X) { c(EvaluateCommonParts(X), EvaluateWeight(X)) }
))
}
problem.1 <- list(name       = "problem.car",  # Function that executes the MOP
xmin       = rep(0.3,148),    # minimum parameter value for each dimension
xmax       = rep(3,148),     # maximum parameter value for each dimension
constraints = list(name = "my_constraints"),
m          = 2)              # Number of objectives
## 1 - Decomposition
decomp <- list(name = "SLD",H = 49) #Population of 50 solutions
## 2 - Neighbors
neighbors <- list(name    = "lambda",
T       = 2, #Size of the neighborhood
delta.p = 0.9) #Probability of using the neighborhood
## 3 - Aggregation function
aggfun <- list(name = "wt")
## 4 - Update strategy
update <- list(name = "standard")
## 5 - Scaling
scaling <- list(name = "simple")
## 6 - Stop criterion
stopcrit  <- list(list(name  = "maxiter",
maxiter  = 50))
## 7 - Variation Operators
variation <- list(list(name  = "sbx",
etax  = 20, pc = 0.7),
list(name  = "polymut",
etam  = 20, pm = 0.3),
list(name  = "truncate"))
## 8 - Show
showpars  <- list(show.iters = "dots",
showevery  = 10)
## 9 - Constraint
my_constraints <- function(X)
{
X = round(X, digits = 1)
nv <- 148 # number of variables
# Prepare output matrix of constraint function values
Cmatrix <- matrix(numeric(),
nrow = nrow(X),
ncol = 2 * nv + 36) # 296 box constraints and 36 inequality constraints
# Set informative column names (be nice to your users!)
colnames(Cmatrix) <- c(paste0("x",
rep(1:nv, times = 2),
rep(c("min","max"), each = nv)),
rep(c("g1"), each = 36))
# Box limits of the feasible space
Xmin <- matrix(0.3, byrow = TRUE, ncol = 148, nrow = nrow(X))
Xmax <- matrix(3, byrow = TRUE, ncol = 148, nrow = nrow(X))
# Calculate "x_i >= 0" and "x_i <= 1" constraints
Cmatrix[, 1:nv]              <- Xmin - X
Cmatrix[, (nv + 1):(2 * nv)] <- X - Xmax
# g1 and h1 functions
g1 <- function(X){
write(X,file = "~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/pop_vars_eval.txt", ncolumns = 148, sep = "\t")
system("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/mazda_mop_sca ~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/")
constraints <- scan('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCarre/Evaluate/pop_cons_eval.txt')
constraints <- matrix(constraints, ncol = 36, byrow = TRUE)
return(constraints)
}
# Calculate g1(x)
Cmatrix[, (2*nv + 1):(2*nv + 36)] <- g1(X)
# Assemble matrix of *violations*
Vmatrix <- Cmatrix
Vmatrix[, 1:(2 * nv + 36)] <- pmax(Vmatrix[, 1:(2 * nv + 36)], 0)        # inequality constraints
# Return necessary variables
return(list(Cmatrix = Cmatrix,
Vmatrix = Vmatrix,
v       = rowSums(Vmatrix)))
}
constraint<- list(name = "penalty",
beta = 100)
## 10 - Execution
results <- moead(problem  = problem.1,
decomp = decomp,
neighbors = neighbors,
aggfun = aggfun,
scaling = scaling,
constraint = constraint,
stopcrit = stopcrit,
update = update,
variation = variation,
showpars = showpars,
seed     = 15)
X = 0
EvaluateCommonParts(X)
EvaluateWeight(X)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
discrete
discrete[1]
discrete[1,]
discrete[2,]
discrete[1,]
unlist(discrete[1,])
which.min(abs(unlist(discrete[1,]) - 4))
discrete[1:2,]
which.min(abs(unlist(discrete[1:2,]) - 4))
which.min(abs(unlist(discrete[1:5,]) - 4))
which.min(abs(unlist(discrete[1,]) - 1.25))
unlist(discrete[1,])
discrete[1,which.min(abs(unlist(discrete[1,]) - 1.25))]
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
unlist(discrete[2,])
unlist(discrete[1:2,])
as.matrix(discrete[1:2,])
as.matrix(discrete[1,])
discrete[1,which.min(abs(as.matrix(discrete[1,]) - 1.25))]
discrete[1,which.min(abs(as.matrix(discrete[1:2,]) - 1.25))]
as.matrix(discrete[1:2,])
as.matrix(discrete[1:2,]) - 1.25
min(as.matrix(discrete[1:2,]) - 1.25)
min(abs(as.matrix(discrete[1,]) - 1.25))
(abs(as.matrix(discrete[1,]) - 1.25))
min(abs(as.matrix(discrete[1,]) - 1.25))
apply(abs(as.matrix(discrete[1,]) - 1.25), 1, FUN=min)
apply(abs(as.matrix(discrete[1:5,]) - 1.25), 1, FUN=min)
apply(abs(as.matrix(discrete[1:5,]) - 1.25), 1, FUN=which.min)
apply(abs(as.matrix(discrete[1,]) - 1.25), 1, FUN=min)
as.matrix(discrete[1,])
apply(abs(as.matrix(discrete[1,]) - 1.2), 1, FUN=min)
objectives
objectives <- scan('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/pop_objs_eval.txt')
objectives <- matrix(objectives, ncol = 4, byrow = TRUE)
objectives
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
X
xix =X
xix
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
X
nrow(X)
ncol(X)
len(X)
length(X)
Teste = c(randu)
Teste
teste <- runif(n = 148, min = 0.3, max = 2.5)
teste
discrete[1,which.min(abs(as.matrix(discrete[1,]) - teste))]
length()
length(discrete)
length(as.matrix(discrete))
18*148
min(na,)
min(abs(as.matrix(discrete[1,]) - 1.25))
min(abs(as.matrix(discrete[1,]) - 1.25), na.rm = FALSE)
min(abs(as.matrix(discrete[1,]) - 1.25), na.rm = TRUE)
min(abs(as.matrix(discrete[1:2,]) - 1.25), na.rm = TRUE)
apply(abs(as.matrix(discrete[1,]) - 1.2), 1,na.rm = TRUE FUN=min)
apply(abs(as.matrix(discrete[1,]) - 1.2), 1,na.rm = TRUE, FUN=min)
apply(abs(as.matrix(discrete[1:2,]) - 1.2), 1,na.rm = TRUE, FUN=min)
apply(abs(as.matrix(discrete) - 1.2), 1,na.rm = TRUE, FUN=min)
as.matrix(discrete)
as.matrix(discrete) - teste
teste
as.matrix(discrete) - teste
abs(as.matrix(discrete) - teste)
apply(abs(as.matrix(discrete) - teste)), 1,na.rm = TRUE, FUN=min)
apply(abs(as.matrix(discrete) - teste)), 1,na.rm = TRUE, FUN=min)
abs(as.matrix(discrete) - teste)
apply(abs(as.matrix(discrete) - teste)), 1,na.rm = TRUE, FUN=min)
apply(abs(as.matrix(discrete) - teste), 1,na.rm = TRUE, FUN=min)
apply(abs(as.matrix(discrete[1,]) - 1.2), 1, FUN=min)
apply(abs(as.matrix(discrete) - teste), 1,na.rm = TRUE, FUN=min)
apply(abs(as.matrix(discrete) - teste), 1,na.rm = TRUE, FUN=min) + teste
apply(abs(as.matrix(discrete) - X), 1,na.rm = TRUE, FUN=which.min)
apply(abs(as.matrix(discrete) - teste), 1,na.rm = TRUE, FUN=which.min)
apply(abs(as.matrix(discrete) - teste), 1, FUN=which.min)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
nearest = apply(abs(as.matrix(discrete) - teste), 1, FUN=which.min)
nearest
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
discrete[i]
for (i in nearest) {
discrete[i]
}
for (i in nearest) {
discrete[i]
}
nearest = apply(abs(as.matrix(discrete) - teste), 1, FUN=which.min)
for (i in nearest) {
discrete[i]
}
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
discreteValues
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
X
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
force(X)
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
discrete
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
force(X)
X
teste <- matrix(runif(n = 148*50, min = 0.3, max = 2.5), nrow = 148)
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
force(X)
teste <- matrix(runif(n = 148*50, min = 0.3, max = 2.5), ncol = 148)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
discretize(teste)
teste[1,]
discretize(teste[1,])
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
discretize(teste[1,])
discretize(teste[1,])
a = discretize(teste[1,])
a
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
a = discretize(teste[1,])
a
a = apply(teste, FUN = discretize,1)
a
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
a = apply(teste, FUN = discretize,1)]
results$X
results$Y
BORA = apply(results$X,1, FUN = Discretize)
BORA
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
BORA = apply(results$X,1, FUN = Discretize)
BORA
BORA = apply(results$Y,1, FUN = Discretize)
results$Y
results$Y[1,]
results$Y[,1]
results$Y[,2]
plot(results$Y[,1], results$Y[,2])
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
plot(results$Y[,1], results$Y[,2])
preset_moead()
source('~/Documents/Unb/6S/EstudosEm/Projects/Cone/MinimizeCone.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/Cone/MinimizeCone.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/Cone/MinimizeCone.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/Cone/MinimizeCone.R', echo=TRUE)
preset_moead()
source('~/Documents/Unb/6S/EstudosEm/Projects/Cone/MinimizeCone.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
library(MOEADr)
preset_moead()
shell(a)
preset_moead()system(paste("source", paste(getwd(), "jpnsecCompetition2019/bin/activate", sep = "/"), sep = " "))
system(paste("source", paste(getwd(), "jpnsecCompetition2019/bin/activate", sep = "/"), sep = " "))
system(paste("source", paste(getwd(), "jpnsecCompetition2019/bin/activate", sep = "/"), sep = " "), intern = TRUE)
system(paste("source", paste(getwd(), "jpnsecCompetition2019/bin/activate", sep = "/"), sep = " "), intern = FALSE)
help("system")
help("shell")
help("shell")
help("system")
help("shell")
help("system")
as.list(environment())
a = as.list(environment())
call.env()
debugSource('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
setwd("~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21")
debugSource('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
debugSource('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
write(t(Y),file = paste(getwd(), "/MyArchive.txt", sep="/"), ncolumns = 2, sep = " ")
Y
write(t(Y),file = paste(getwd(), "/MyArchive.txt", sep="/"), ncolumns = 2, sep = " ")
write.csv(t(Y),file = paste(getwd(), "/MyArchive.txt", sep="/"), ncolumns = 2, sep = " ")
write.csv(Y, file = "MyArchive.txt")
debugSource('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
debugSource('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
debugSource('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
source('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
source('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
YAll = scan(paste(getwd(), "MyArchive.txt", sep = "/"), quiet = TRUE)
A = resize(YAll, nrow = 3000, ncol = 2)
source(ramify)
YAll = scan(paste(getwd(), "MyArchive.txt", sep = "/"), quiet = TRUE, nlines = 3000)
YAll = scan(paste(getwd(), "MyArchive.txt", sep = "/"), quiet = TRUE, nlines = 30)
YAll = scan(paste(getwd(), "MyArchive.txt", sep = "/"), quiet = TRUE, nlines = 3000)
A = matrix(YAll,nrow = 3000, ncol = 2)
A
A[1,]
A[2,]
A[3,]
A[,1]
A[1,]
View(A)
View(A)
A = matrix(YAll,nrow = 3000, ncol = 2, byrow = TRUE)
A = matrix(YAll,c(300,2,100), byrow = TRUE)
View(A)
View(A)
A = matrix(YAll,c(300,2,100), byrow = FALSE)
A[1,,]
A[1,]
A[1,:,]
dim(A)
A = matrix(YAll,c(300,2,100), byrow = FALSE)
dim(A) = c(300,2,100)
300*2*100
YAll = scan(paste(getwd(), "MyArchive.txt", sep = "/"), quiet = TRUE)
A = matrix(YAll,nrow = 3000, ncol = 2, byrow = TRUE)
dim(A) = c(300,2,30)
dim(A) = c(100,2,30)
A
A[1,]
A[1,,]
A[,1,]
A[,1,1]
A[,2,1]
A[,1,2]
A[,1,3]
A[,3,]
A[,2,]
A[1,2,1]
A = matrix(YAll,nrow = 3000, ncol = 2, byrow = TRUE)
A[1,]
A[2,]
maxob1 = max(A[,1])
YAll = scan(paste(getwd(), "MyArchive.txt", sep = "/"), quiet = TRUE)
A = matrix(YAll,nrow = 3000, ncol = 2, byrow = TRUE)
maxob1 = max(A[,1])
minob1 = min(A[,1])
maxob2 = max(A[,2])
minob2 = min(A[,2])
B = array(0, c(100,2,30))
B[,,1] = A[1:100,]
A[1:100,]
B
B[1:100,,1] =A[1:100,]
B
B[1:100,,1]
B = array(0, c(100,2,30))
for(i in 1:n_iterations){
B[,,i] = A[(i-1)*100+1:100*i,]
}
for(i in 1:n_iterations){
B[,,i] = A[((i-1)*100+1):(100*i),]
}
b[,,1]
B[,,1]
B[,,2]
Newnormalized = B
Newnormalized[,1,] = (B[,1,] - maxob1)/(minob1 - maxob1)
Newnormalized[,2,] = (B[,2,] - maxob2)/(minob2 - maxob2)
max(Newnormalized)
min(Newnormalized)
NewHyper = matrix(0,ncol = n_iterations, nrow = 1)
NewHyper[1]
NewHyper[2]
NewHyper = matrix(0,ncol = n_iterations, nrow = 1)
for(i in 1:n_iterations){
NewHyper[i] = dominated_hypervolume(Newnormalized[,,i], (c(1.1,1.1)))
}
Newnormalized[,,0]
Newnormalized[,,1]
for(i in 1:n_iterations){
NewHyper[i] = dominated_hypervolume(t(Newnormalized[,,i]), (c(1.1,1.1)))
}
NewHyper
plot(NewHyper)
dim(NewHyper)
index = matrix(1:30,ncol = 30)
plot(NewHyper, index)
plot(index, NewHyper)
debugSource('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
V$v
V$v == 0
V$v >0 0
V$v >0
which(V$v > 0)
which(V$v == 0)
which(V$v = 0)
which(V$v == 0)
ifelse(mat<0,NA,Y)
ifelse(Y<0,NA,Y)
ifelse(Y>0,NA,Y)
ifelse(Y>0,0,Y)
debugSource('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
source('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
help(ifelse)
source('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
NewHyper
plot9B
plot(B)
B
source('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
NewHyper
plot(B)
plot(Newnormalized)
source('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
plot(B)
debugSource('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
dim9V$v
dim(V$v)
min(dim9V$v)
min(V$v)
ifelse(V$v>0,0,Y
)
source('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
source('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
debugSource('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
ifelse(V$v>0,0,Y)
ifelse(V$v>0,0,Y[,])
ifelse(V$v>0,0,Y[,])
ifelse(V$v>0,0,Y[1,1])
ifelse(V$v>0,c(0,0),Y[])
Y
V$v[5] = 0
ifelse(V$v>0,c(0,0),Y[])
ifelse(V$v>0,c(0,0),Y[,1])
ifelse(V$v>0,c(0,0),Y[,2])
matrix(c(ifelse(V$v>0,c(0,0),Y[,2]), ifelse(V$v>0,c(0,0),Y[,1])), nrow = n_individuals, ncol = 2)
Y[,5]
Y[5,]
matrix(c(ifelse(V$v>0,c(0,0),Y[,1]), ifelse(V$v>0,c(0,0),Y[,2])), nrow = n_individuals, ncol = 2)
source('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
source('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
NewHyper
min
min(B)
B
B[,,1]
max(B[,,1])
max(B[,,2])
max(B[,,3])
max(B[,,6])
max(B[,,8])
max(B[,,6])
max(B[,,7])
max(B[,,8])
NewHyper
1.1*1.1
source('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
NewHyper
plot(B[,1,1],B[,2,1])
plot(B[,1,7],B[,2,7])
plot(B[,1,10],B[,2,10])
plot(Newnormalized[,1,10],Newnormalized[,2,10])
Newnormalized[,2,10]
B[,2,10]
which(B[,2,10] > -1)
B[which(B[,2,10] > -1),2,10]
plot(B[which(B[,1,10] > -1),1,10],B[which(B[,2,10] > -1),2,10])
order(B)
B[which(B>0)]
ZOZ = B[which(B>0)]
ZOZ[,,1]
sort(B,partial=length(B[,1,])-1)[length(B[,1,])-1]
sort(B,partial=length(B[,1,])-1)[length(B[,1,])]
sort(B,partial=length(B[,1,])-1)[length(B[,1,])-1]
sort(B,partial=length(B[,1,])-1)[0]
sort(B,partial=length(B[,1,])-1)[1]
sort(B,partial=length(B[,1,])-1)[2]
sort(B,partial=length(B[,1,])-1)[3]
sort(B,partial=length(B[,1,])-1)[4]
help(max)
source('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
hyper
source('~/Documents/Unb/Grupo de Estudos/MultiObjectiveProjects/REProblems/CRE21/CR21.R', echo=TRUE)
hyper
NewHyper
B[,,1]
B[,,2]
B[,,3]
B[,,4]

source('~/Documents/Unb/5S/GrupoPesquisa/Semana5/teste2.R', echo=TRUE)
source('~/Documents/Unb/5S/GrupoPesquisa/Semana5/teste2.R', echo=TRUE)
source('~/Documents/Unb/5S/GrupoPesquisa/Semana5/teste2.R', echo=TRUE)
no_col <- max(count.fields("~/Documents/Unb/5S/GrupoPesquisa/Semana14/Evaluate/DiscreteValues.txt", sep = ","))
max(count.fields("~/Documents/Unb/5S/GrupoPesquisa/Semana14/Evaluate/DiscreteValues.txt", sep = ","))
dataI
source('~/Documents/Unb/5S/GrupoPesquisa/Semana5/teste2.R', echo=TRUE)
dataI
source('~/Documents/Unb/5S/GrupoPesquisa/Semana5/teste2.R', echo=TRUE)
source('~/Documents/Unb/5S/GrupoPesquisa/Semana5/teste2.R', echo=TRUE)
dataI
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
library(MOEADr)
#Objecive Function for the total weight
EvaluateWeight <- function(X){
write(round(X, digits = 1),file = "~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/pop_vars_eval.txt", ncolumns = 148, sep = "\t")
system("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/mazda_mop_sca ~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/")
objectives <- scan('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/pop_objs_eval.txt')
objectives <- matrix(objectives, ncol = 4, byrow = TRUE)
weight = matrix(objectives[,1], ncol = 1)
weight
}
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
read.table(sep = ",",fill = TRUE,"DiscreteValues.txt")
read.table("DiscreteValues.txt", sep = ",",fill = TRUE)
read.table("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/DiscreteValues.txt", sep = ",",fill = TRUE)
a = read.table("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/DiscreteValues.txt", sep = ",",fill = TRUE)
a = read.table("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/DiscreteValues.txt",col.names = paste0("V",seq_len(16)), sep = ",",fill = TRUE)
a
a = read.table("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/DiscreteValues.txt",col.names = paste0("V",seq_len(17)), sep = ",",fill = TRUE)
a
a = read.table("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/DiscreteValues.txt",col.names = paste0("V",seq_len(18)), sep = ",",fill = TRUE)
a
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
discrete = read.table("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/DiscreteValues.txt",col.names = paste0("V",seq_len(18)), sep = ",",fill = TRUE)
library(MOEADr)
#Reading the possible discrete values
discrete = read.table("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/DiscreteValues.txt",col.names = paste0("V",seq_len(18)), sep = ",",fill = TRUE)
#Objecive Function for the total weight
EvaluateWeight <- function(X){
write(round(X, digits = 1),file = "~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/pop_vars_eval.txt", ncolumns = 148, sep = "\t")
system("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/mazda_mop_sca ~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/")
objectives <- scan('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/pop_objs_eval.txt')
objectives <- matrix(objectives, ncol = 4, byrow = TRUE)
weight = matrix(objectives[,1], ncol = 1)
weight
}
#Objective Function for the number of commom parts
EvaluateCommonParts <- function(X){
write(round(X, digits = 1),file = "~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/pop_vars_eval.txt", ncolumns = 148, sep = "\t")
system("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/mazda_mop_sca ~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/")
objectives <- scan('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/pop_objs_eval.txt')
objectives <- matrix(objectives, ncol = 4, byrow = TRUE)
common = matrix(objectives[,2], ncol = 1)
common
}
#Definition of the problem
problem.car <- function(X) {
t(apply(X, MARGIN = 1,
FUN = function(X) { c(EvaluateCommonParts(X), EvaluateWeight(X)) }
))
}
problem.1 <- list(name       = "problem.car",  # Function that executes the MOP
xmin       = rep(0.3,148),    # minimum parameter value for each dimension
xmax       = rep(3,148),     # maximum parameter value for each dimension
constraints = list(name = "my_constraints"),
m          = 2)              # Number of objectives
## 1 - Decomposition
decomp <- list(name = "SLD",H = 49) #Population of 50 solutions
## 2 - Neighbors
neighbors <- list(name    = "lambda",
T       = 2, #Size of the neighborhood
delta.p = 0.9) #Probability of using the neighborhood
## 3 - Aggregation function
aggfun <- list(name = "wt")
## 4 - Update strategy
update <- list(name = "standard")
## 5 - Scaling
scaling <- list(name = "simple")
## 6 - Stop criterion
stopcrit  <- list(list(name  = "maxiter",
maxiter  = 50))
## 7 - Variation Operators
variation <- list(list(name  = "sbx",
etax  = 20, pc = 0.7),
list(name  = "polymut",
etam  = 20, pm = 0.3),
list(name  = "truncate"))
## 8 - Show
showpars  <- list(show.iters = "dots",
showevery  = 10)
## 9 - Constraint
my_constraints <- function(X)
{
X = round(X, digits = 1)
nv <- 148 # number of variables
# Prepare output matrix of constraint function values
Cmatrix <- matrix(numeric(),
nrow = nrow(X),
ncol = 2 * nv + 36) # 296 box constraints and 36 inequality constraints
# Set informative column names (be nice to your users!)
colnames(Cmatrix) <- c(paste0("x",
rep(1:nv, times = 2),
rep(c("min","max"), each = nv)),
rep(c("g1"), each = 36))
# Box limits of the feasible space
Xmin <- matrix(0.3, byrow = TRUE, ncol = 148, nrow = nrow(X))
Xmax <- matrix(3, byrow = TRUE, ncol = 148, nrow = nrow(X))
# Calculate "x_i >= 0" and "x_i <= 1" constraints
Cmatrix[, 1:nv]              <- Xmin - X
Cmatrix[, (nv + 1):(2 * nv)] <- X - Xmax
# g1 and h1 functions
g1 <- function(X){
write(X,file = "~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/pop_vars_eval.txt", ncolumns = 148, sep = "\t")
system("~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/mazda_mop_sca ~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/")
constraints <- scan('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCarre/Evaluate/pop_cons_eval.txt')
constraints <- matrix(constraints, ncol = 36, byrow = TRUE)
return(constraints)
}
# Calculate g1(x)
Cmatrix[, (2*nv + 1):(2*nv + 36)] <- g1(X)
# Assemble matrix of *violations*
Vmatrix <- Cmatrix
Vmatrix[, 1:(2 * nv + 36)] <- pmax(Vmatrix[, 1:(2 * nv + 36)], 0)        # inequality constraints
# Return necessary variables
return(list(Cmatrix = Cmatrix,
Vmatrix = Vmatrix,
v       = rowSums(Vmatrix)))
}
constraint<- list(name = "penalty",
beta = 100)
## 10 - Execution
results <- moead(problem  = problem.1,
decomp = decomp,
neighbors = neighbors,
aggfun = aggfun,
scaling = scaling,
constraint = constraint,
stopcrit = stopcrit,
update = update,
variation = variation,
showpars = showpars,
seed     = 15)
X = 0
EvaluateCommonParts(X)
EvaluateWeight(X)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
discrete
discrete[1]
discrete[1,]
discrete[2,]
discrete[1,]
unlist(discrete[1,])
which.min(abs(unlist(discrete[1,]) - 4))
discrete[1:2,]
which.min(abs(unlist(discrete[1:2,]) - 4))
which.min(abs(unlist(discrete[1:5,]) - 4))
which.min(abs(unlist(discrete[1,]) - 1.25))
unlist(discrete[1,])
discrete[1,which.min(abs(unlist(discrete[1,]) - 1.25))]
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
unlist(discrete[2,])
unlist(discrete[1:2,])
as.matrix(discrete[1:2,])
as.matrix(discrete[1,])
discrete[1,which.min(abs(as.matrix(discrete[1,]) - 1.25))]
discrete[1,which.min(abs(as.matrix(discrete[1:2,]) - 1.25))]
as.matrix(discrete[1:2,])
as.matrix(discrete[1:2,]) - 1.25
min(as.matrix(discrete[1:2,]) - 1.25)
min(abs(as.matrix(discrete[1,]) - 1.25))
(abs(as.matrix(discrete[1,]) - 1.25))
min(abs(as.matrix(discrete[1,]) - 1.25))
apply(abs(as.matrix(discrete[1,]) - 1.25), 1, FUN=min)
apply(abs(as.matrix(discrete[1:5,]) - 1.25), 1, FUN=min)
apply(abs(as.matrix(discrete[1:5,]) - 1.25), 1, FUN=which.min)
apply(abs(as.matrix(discrete[1,]) - 1.25), 1, FUN=min)
as.matrix(discrete[1,])
apply(abs(as.matrix(discrete[1,]) - 1.2), 1, FUN=min)
objectives
objectives <- scan('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Evaluate/pop_objs_eval.txt')
objectives <- matrix(objectives, ncol = 4, byrow = TRUE)
objectives
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
X
xix =X
xix
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
X
nrow(X)
ncol(X)
len(X)
length(X)
Teste = c(randu)
Teste
teste <- runif(n = 148, min = 0.3, max = 2.5)
teste
discrete[1,which.min(abs(as.matrix(discrete[1,]) - teste))]
length()
length(discrete)
length(as.matrix(discrete))
18*148
min(na,)
min(abs(as.matrix(discrete[1,]) - 1.25))
min(abs(as.matrix(discrete[1,]) - 1.25), na.rm = FALSE)
min(abs(as.matrix(discrete[1,]) - 1.25), na.rm = TRUE)
min(abs(as.matrix(discrete[1:2,]) - 1.25), na.rm = TRUE)
apply(abs(as.matrix(discrete[1,]) - 1.2), 1,na.rm = TRUE FUN=min)
apply(abs(as.matrix(discrete[1,]) - 1.2), 1,na.rm = TRUE, FUN=min)
apply(abs(as.matrix(discrete[1:2,]) - 1.2), 1,na.rm = TRUE, FUN=min)
apply(abs(as.matrix(discrete) - 1.2), 1,na.rm = TRUE, FUN=min)
as.matrix(discrete)
as.matrix(discrete) - teste
teste
as.matrix(discrete) - teste
abs(as.matrix(discrete) - teste)
apply(abs(as.matrix(discrete) - teste)), 1,na.rm = TRUE, FUN=min)
apply(abs(as.matrix(discrete) - teste)), 1,na.rm = TRUE, FUN=min)
abs(as.matrix(discrete) - teste)
apply(abs(as.matrix(discrete) - teste)), 1,na.rm = TRUE, FUN=min)
apply(abs(as.matrix(discrete) - teste), 1,na.rm = TRUE, FUN=min)
apply(abs(as.matrix(discrete[1,]) - 1.2), 1, FUN=min)
apply(abs(as.matrix(discrete) - teste), 1,na.rm = TRUE, FUN=min)
apply(abs(as.matrix(discrete) - teste), 1,na.rm = TRUE, FUN=min) + teste
apply(abs(as.matrix(discrete) - X), 1,na.rm = TRUE, FUN=which.min)
apply(abs(as.matrix(discrete) - teste), 1,na.rm = TRUE, FUN=which.min)
apply(abs(as.matrix(discrete) - teste), 1, FUN=which.min)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
nearest = apply(abs(as.matrix(discrete) - teste), 1, FUN=which.min)
nearest
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
discrete[i]
for (i in nearest) {
discrete[i]
}
for (i in nearest) {
discrete[i]
}
nearest = apply(abs(as.matrix(discrete) - teste), 1, FUN=which.min)
for (i in nearest) {
discrete[i]
}
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
discreteValues
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
X
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
force(X)
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
discrete
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
force(X)
X
teste <- matrix(runif(n = 148*50, min = 0.3, max = 2.5), nrow = 148)
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
force(X)
teste <- matrix(runif(n = 148*50, min = 0.3, max = 2.5), ncol = 148)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
discretize(teste)
teste[1,]
discretize(teste[1,])
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
discretize(teste[1,])
discretize(teste[1,])
a = discretize(teste[1,])
a
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/Discrete.R', echo=TRUE)
a = discretize(teste[1,])
a
a = apply(teste, FUN = discretize,1)
a
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
a = apply(teste, FUN = discretize,1)]
results$X
results$Y
BORA = apply(results$X,1, FUN = Discretize)
BORA
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
BORA = apply(results$X,1, FUN = Discretize)
BORA
BORA = apply(results$Y,1, FUN = Discretize)
results$Y
results$Y[1,]
results$Y[,1]
results$Y[,2]
plot(results$Y[,1], results$Y[,2])
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
plot(results$Y[,1], results$Y[,2])
preset_moead()
source('~/Documents/Unb/6S/EstudosEm/Projects/Cone/MinimizeCone.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/Cone/MinimizeCone.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/Cone/MinimizeCone.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/Cone/MinimizeCone.R', echo=TRUE)
preset_moead()
source('~/Documents/Unb/6S/EstudosEm/Projects/Cone/MinimizeCone.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
debugSource('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
source('~/Documents/Unb/6S/EstudosEm/Projects/MazdaCar/MazdaCar.R', echo=TRUE)
library(MOEADr)
preset_moead()
shell(a)
preset_moead()system(paste("source", paste(getwd(), "jpnsecCompetition2019/bin/activate", sep = "/"), sep = " "))
system(paste("source", paste(getwd(), "jpnsecCompetition2019/bin/activate", sep = "/"), sep = " "))
system(paste("source", paste(getwd(), "jpnsecCompetition2019/bin/activate", sep = "/"), sep = " "), intern = TRUE)
system(paste("source", paste(getwd(), "jpnsecCompetition2019/bin/activate", sep = "/"), sep = " "), intern = FALSE)
help("system")
help("shell")
help("shell")
help("system")
help("shell")
help("system")
as.list(environment())
a = as.list(environment())
call.env()
source('~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem1/MazdaCar3.R', echo=TRUE)
setwd("~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem1")
source('~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem1/MazdaCar3.R', echo=TRUE)
setwd("~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem")
source('~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem/MazdaCar3.R', echo=TRUE)
source("updt_standard_save2.R")
source("MAZDA_hypervolume_file.R")
source("constraint_dynamic.R")
source("constraint_selfadapting.R")
View(constraint_dynamic)
source('~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem/MazdaCar3.R', echo=TRUE)
source('~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem/MazdaCar3.R', echo=TRUE)
parent.frame(2)$Vt$v == 0
P
bigZ
1/300
sum(parent.frame(2)$Vt$v == 0)
lenght(bigV)
length(bigV)
length(bigV[1,])
source('~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem/MazdaCar3.R', echo=TRUE)
parent.frame(2)$Vt$v == 0
sum(parent.frame(2)$Vt$v == 0)
len(parent.frame(2)$Vt$v)
length(parent.frame(2)$Vt$v)
bigV
size(bigV)
dim(bigV)
P
source('~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem/MazdaCar3.R', echo=TRUE)
bigV < 0
bigV < 0.25
sum(bigV < 0.25)
which(bigV < 0.25)
bigV[which(bigV < 0.25)]
bigV[which(bigV < 0.25 && bigV == 0)]
bigV[which(bigV >= 0.25 && bigV < 5)]
biZV[which(bigV >= 0.25 && bigV < 5)] = bigV[which(bigV >= 0.25 && bigV < 5)]*K(1) + bigZ[which(bigV >= 0.25 && bigV < 5)]
K[1]
biZV[which(bigV >= 0.25 && bigV < 5)] = bigV[which(bigV >= 0.25 && bigV < 5)]*K[1] + bigZ[which(bigV >= 0.25 && bigV < 5)]
View(bigV)
bigZV <- matrix(ncol=ncol(bigV),nrow = nrow(bigV))
biZV[which(bigV >= 0.25 && bigV < 5)] = bigV[which(bigV >= 0.25 && bigV < 5)]*K[1] + bigZ[which(bigV >= 0.25 && bigV < 5)]
bigZV[which(bigV >= 0.25 && bigV < 5)] = bigV[which(bigV >= 0.25 && bigV < 5)]*K[1] + bigZ[which(bigV >= 0.25 && bigV < 5)]
View(bigZV)
which(bigV >= 0.25 && bigV < 5)
which(bigV < 0.25)
which(bigV > 0.5)
which(bigV > 0.75)
which(bigV > 0.8)
which(bigV > 0.9)
which(bigV > 0.95)
bigV
which(bigV >= 0.25 && bigV < 0.5)
which(bigV < 0.5)
which(bigV >= 0.25)
BigV >= 0.25
bigV >= 0.25 &
&
bigV >= 0.25
bigV >= 0.25 && igV < 0.5
bigV >= 0.25 && bigV < 0.5
(bigV >= 0.25) && (bigV < 0.5)
(bigV >= 0.25) & (bigV < 0.5)
bigZV[which(bigV >= 0.25 & bigV < 0.5)] = bigV[which(bigV >= 0.25 & bigV < 0.5)]*K[1] + bigZ[which(bigV >= 0.25 & bigV < 0.5)]
# Calculate penalized values
bigZV <- matrix(ncol=ncol(bigV),nrow = nrow(bigV))
bigZV[which(bigV >= 0.25 & bigV < 0.5)] = bigV[which(bigV >= 0.25 & bigV < 0.5)]*K[1] + bigZ[which(bigV >= 0.25 & bigV < 0.5)]
View(bigZV)
K[1]
View(bigZV)
View(bigV)
source('~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem/MazdaCar3.R', echo=TRUE)
source('~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem/MazdaCar3.R', echo=TRUE)
setwd("~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/REProblems/MyFunctions")
source('~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/REProblems/MyFunctions/CRE2_hypervolume_files.R', echo=TRUE)
filename = "DATA/P2/"
#Extracting the objective values from the files
A = array(0,c(n_individuals*n_iterations, n_objectives+1, 20))
for(i in 1:20){
YAll = scan(sprintf(paste("DATA/P2/","/MyArchive%d.txt",sep = ""),i), quiet = TRUE)
A[,,i] = matrix(YAll,nrow = n_individuals*n_iterations, ncol = n_objectives+1, byrow = TRUE)
}
#Extracting the global max and min feasible values
maxob1 = max(A[which(A[,3,1]==1),1,1])
minob1 = min(A[which(A[,3,1]==1),1,1])
maxob2 = max(A[which(A[,3,1]==1),2,1])
minob2 = min(A[which(A[,3,1]==1),2,1])
for(i in 2:20){
maxob1 = ifelse(maxob1 > max(A[which(A[,3,i]==1),1,i]), maxob1, max(A[which(A[,3,i]==1),1,i]))
minob1 = ifelse(minob1 < min(A[which(A[,3,i]==1),1,i]), minob1, min(A[which(A[,3,i]==1),1,i]))
maxob2 = ifelse(maxob2 > max(A[which(A[,3,i]==1),2,i]), maxob2, max(A[which(A[,3,i]==1),2,i]))
minob2 = ifelse(minob2 < min(A[which(A[,3,i]==1),2,i]), minob2, min(A[which(A[,3,i]==1),2,i]))
}
for (ite in 1:20){
#Converting the matrix to have n_iteration as a dimension
B = array(0, c(n_individuals,n_objectives+1,n_iterations))
for(i in 1:n_iterations){
B[,,i] = A[((i-1)*n_individuals+1):(n_individuals*i),,ite]
}
#Normalizing the values using all the iterations
Newnormalized = B
Newnormalized[,1,] = (B[,1,] - minob1)/(maxob1 - minob1)
Newnormalized[,2,] = (B[,2,] - minob2)/(maxob2 - minob2)
NewHyper = matrix(0,ncol = n_iterations, nrow = 1)
for(j in 1:n_iterations){
#No feasible solutions in the population
if(sum(Newnormalized[,3,j]) == 0){
NewHyper[j] = 0
}
#Only one feasible solution
else if(sum(Newnormalized[,3,j]) == 1){
NewHyper[j] = dominated_hypervolume(matrix(Newnormalized[which(Newnormalized[,3,j] == 1),1:2,j]), (c(1.1,1.1)))
}
#Multiple feasible solutions
else{
NewHyper[j] = dominated_hypervolume(t(Newnormalized[which(Newnormalized[,3,j] == 1),1:2,j]), (c(1.1,1.1)))
}
}
plot(c(1:100),NewHyper)
}
return(NewHyper)
CRE2_hypervolume_files <- function(filename, n_individuals, n_objectives, n_iterations...){
#Extracting the objective values from the files
A = array(0,c(n_individuals*n_iterations, n_objectives+1, 20))
for(i in 1:20){
YAll = scan(sprintf(paste("DATA/P2/","/MyArchive%d.txt",sep = ""),i), quiet = TRUE)
A[,,i] = matrix(YAll,nrow = n_individuals*n_iterations, ncol = n_objectives+1, byrow = TRUE)
}
#Extracting the global max and min feasible values
maxob1 = max(A[which(A[,3,1]==1),1,1])
minob1 = min(A[which(A[,3,1]==1),1,1])
maxob2 = max(A[which(A[,3,1]==1),2,1])
minob2 = min(A[which(A[,3,1]==1),2,1])
for(i in 2:20){
maxob1 = ifelse(maxob1 > max(A[which(A[,3,i]==1),1,i]), maxob1, max(A[which(A[,3,i]==1),1,i]))
minob1 = ifelse(minob1 < min(A[which(A[,3,i]==1),1,i]), minob1, min(A[which(A[,3,i]==1),1,i]))
maxob2 = ifelse(maxob2 > max(A[which(A[,3,i]==1),2,i]), maxob2, max(A[which(A[,3,i]==1),2,i]))
minob2 = ifelse(minob2 < min(A[which(A[,3,i]==1),2,i]), minob2, min(A[which(A[,3,i]==1),2,i]))
}
for (ite in 1:20){
#Converting the matrix to have n_iteration as a dimension
B = array(0, c(n_individuals,n_objectives+1,n_iterations))
for(i in 1:n_iterations){
B[,,i] = A[((i-1)*n_individuals+1):(n_individuals*i),,ite]
}
#Normalizing the values using all the iterations
Newnormalized = B
Newnormalized[,1,] = (B[,1,] - minob1)/(maxob1 - minob1)
Newnormalized[,2,] = (B[,2,] - minob2)/(maxob2 - minob2)
NewHyper = matrix(0,ncol = n_iterations, nrow = 1)
for(j in 1:n_iterations){
#No feasible solutions in the population
if(sum(Newnormalized[,3,j]) == 0){
NewHyper[j] = 0
}
#Only one feasible solution
else if(sum(Newnormalized[,3,j]) == 1){
NewHyper[j] = dominated_hypervolume(matrix(Newnormalized[which(Newnormalized[,3,j] == 1),1:2,j]), (c(1.1,1.1)))
}
#Multiple feasible solutions
else{
NewHyper[j] = dominated_hypervolume(t(Newnormalized[which(Newnormalized[,3,j] == 1),1:2,j]), (c(1.1,1.1)))
}
}
plot(c(1:100),NewHyper)
}
return(NewHyper)
}
source('~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem/MazdaCar3.R', echo=TRUE)
debugSource('~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem/constraint_multistaged.R', echo=TRUE)
debugSource('~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem/constraint_multistaged.R', echo=TRUE)
setwd("~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem")
source('~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem/MazdaCar3.R', echo=TRUE)
View(constraint_multistaged)
View(constraint_multistaged)
View(constraint_multistaged)
View(constraint_multistaged)
source('~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem/MazdaCar3.R', echo=TRUE)
source('~/Documents/Unb/GrupodeEstudos/MultiObjectiveProjects/MAZDACarProblem/MazdaCar3.R', echo=TRUE)
